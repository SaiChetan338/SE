# -*- coding: utf-8 -*-
"""Softwareeng1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kWbmYzbJaU1uoN_1q4uXAYqHJb2M2WZE
"""

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time):
    coefficients = {
        'a': 0.1,
        'b': -1,
        'c': 2
    }

    temperature = coefficients['a'] * (time ** 2) + coefficients['b'] * time + coefficients['c']
    return temperature, coefficients

def main():
    time_values = np.linspace(0, 10, 50)
    temperature_values, coefficients = quadratic_model(time_values)

    plt.plot(time_values, temperature_values, label=f'Hard Coded a={coefficients["a"]}, b={coefficients["b"]}, c={coefficients["c"]}')
    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.title('Hard Coded')
    plt.legend()
    plt.grid()
    plt.show()

if __name__ == '__main__':
    main()

"""# New Section"""

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time, a, b, c):
    temperature = a*(time ** 2) + b * time + c
    return temperature

def main():

    a = float(input("Enter coefficient a: "))
    b = float(input("Enter coefficient b: "))
    c = float(input("Enter coefficient c: "))

    time_values = np.linspace(0, 10, 50)
    temperature_values = quadratic_model(time_values, a, b, c)


    plt.figure(figsize=(10, 6))
    plt.plot(time_values, temperature_values, label=f'User Input a={a}, b={b}, c={c}')

    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.title('Quadratic Model With User Input')
    plt.legend()
    plt.grid()
    plt.show()

if __name__ == '__main__':
    main()

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time, a, b, c):
    temperature = a*(time ** 2) + b * time + c
    return temperature

def main():

    coefficient_sets = [
        (0.1, -1, 2),
        (0.2, 2, 5),
        (0.15, 4, 3)
    ]

    for idx, (a, b, c) in enumerate(coefficient_sets):
        time_values = np.linspace(0, 10, 50)
        temperature_values = quadratic_model(time_values, a, b, c)
        label = f'Set {idx + 1}: a={a}, b={b}, c={c}'
        plt.plot(time_values, temperature_values, label=label)

    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.title('Multiple Set')
    plt.legend()
    plt.grid()
    plt.show()

if __name__ == '__main__':
    main()

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time, a, b, c):
    temperature = a*(time ** 2) + b * time + c
    return temperature

def main():

    coefficient_sets = [
        (0.1, -5, 2)
    ]

    for idx, (a, b, c) in enumerate(coefficient_sets):
        time_values = np.linspace(0, 10, 50)
        temperature_values = quadratic_model(time_values, a, b, c)
        label = f'Set {idx + 1}: a={a}, b={b}, c={c}'
        plt.plot(time_values, temperature_values, label=label)

    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.title('Single Set')
    plt.legend()
    plt.grid()
    plt.show()

if __name__ == '__main__':
    main()

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time, a, b, c):
    temperature = a * (time ** 2) + b * time + c
    return temperature

def read_coefficients(file_path):
    coefficient_sets = []
    with open(file_path, 'r') as file:
        for line in file:
            a, b, c = map(float, line.strip().split(','))
            coefficient_sets.append((a, b, c))
    return coefficient_sets

def main():
    file_path = 'filein.txt'
    coefficient_sets = read_coefficients(file_path)

    for idx, (a, b, c) in enumerate(coefficient_sets):
        time_values = np.linspace(0, 10, 50)
        temperature_values = quadratic_model(time_values, a, b, c)
        label = f'Set {idx + 1}: a={a}, b={b}, c={c}'
        plt.plot(time_values, temperature_values, label=label)

    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.title('Multiple Set From File')
    plt.legend()
    plt.show()

if __name__ == '__main__':
    main()

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time, a, b, c):
    """
    Quadratic model function to calculate temperature based on time and coefficients.
    """
    temperature = a * (time ** 2) + b * time + c
    return temperature

def main():

    a_hard = 2
    b_hard = -1
    c_hard = 5

    print("Enter coefficients for user input:")

    try:
        a_user = float(input("Enter coefficient a: "))
        b_user = float(input("Enter coefficient b: "))
        c_user = float(input("Enter coefficient c: "))
    except ValueError:
        print("Invalid input. Please enter numeric values.")
        return

    time_values = np.linspace(0, 10, 50)

    temperature_values_hard = quadratic_model(time_values, a_hard, b_hard, c_hard)
    temperature_values_user = quadratic_model(time_values, a_user, b_user, c_user)

    plt.figure(figsize=(10, 6))
    plt.plot(time_values, temperature_values_hard, label='Hard-Coded Coefficients (a=0.1, b=-1, c=2)', linestyle='-', color='blue')
    plt.plot(time_values, temperature_values_user, label=f'User Input Coefficients (a={a_user}, b={b_user}, c={c_user})', linestyle='--', color='red')

    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.title('Quadratic Model Comparison')
    plt.legend()
    plt.grid()
    plt.show()

if __name__ == '__main__':
    main()

import matplotlib.pyplot as plt
import numpy as np

def quadratic_model(time, a, b, c):
    temperature = a * (time ** 2) + b * time + c
    return temperature

def read_coefficients(file_path):
    coefficient_sets = []
    with open(file_path, 'r') as file:
        for line in file:
            a, b, c = map(float, line.strip().split(','))
            coefficient_sets.append((a, b, c))
    return coefficient_sets

def main():
    file_path = 'fileone.txt'
    coefficient_sets = read_coefficients(file_path)

    for idx, (a, b, c) in enumerate(coefficient_sets):
        time_values = np.linspace(0, 10, 50)
        temperature_values = quadratic_model(time_values, a, b, c)
        label = f'Set {idx + 1}: a={a}, b={b}, c={c}'
        plt.plot(time_values, temperature_values, label=label)

    plt.xlabel('Time')
    plt.ylabel('Temperature')
    plt.title('single Set From File')
    plt.legend()
    plt.grid()
    plt.show()


if __name__ == '__main__':
    main()